define HELP_TEXT_LLVM_TEST
echo ""
echo "llvm-test-suite Make Targets"
echo "--------------------------------------------------------------------------------"
echo "llvm-build             Builds all the enabled tests"
echo "llvm-run               Calls llvm-build and then runs built tests"
echo "llvm-run-opt           Invokes llvm-build with optimization enabled and runs tests"
echo "llvm-clean             Deletes the build directory"
endef

LLVM_TEST_GIT=$(LLVM_TEST_ROOT)/..
LLVM_TEST_BUILD=$(LLVM_TEST_ROOT)/build

# Use cmake with -LAH to see all configuration options
# CXX=JLC to throw error for C++ benchmarks as these should be excluded
CMAKE_CONFIG= \
	-DCMAKE_C_COMPILER=$(JLC) \
	-DCMAKE_CXX_COMPILER=$(JLC) \
	-DTEST_SUITE_ENABLE_BITCODE_TESTS=OFF \
	-DTEST_SUITE_COLLECT_CODE_SIZE=OFF \
	-DTEST_SUITE_COLLECT_COMPILE_TIME=OFF \
	# Type of benchmark inputs (may be test,train or ref)
	# -DTEST_SUITE_RUN_TYPE=train

.PHONY: llvm-build
llvm-build:
	mkdir -p $(LLVM_TEST_BUILD)
	cd $(LLVM_TEST_BUILD) && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/O0.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD) && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-aa
llvm-build-aa:
	mkdir -p $(LLVM_TEST_BUILD)-aa
	cd $(LLVM_TEST_BUILD)-aa && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/aa.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-aa && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-andersen-agnostic
llvm-build-andersen-agnostic:
	cmake $(CMAKE_CONFIG) \
		-B$(LLVM_TEST_BUILD)-andersen-agnostic \
		-C$(LLVM_TEST_ROOT)/cmake/AndersenAgnostic.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-andersen-agnostic && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-steensgaard-agnostic
llvm-build-steensgaard-agnostic:
	cmake $(CMAKE_CONFIG) \
		-B $(LLVM_TEST_BUILD)-steensgaard-agnostic \
		-C $(LLVM_TEST_ROOT)/cmake/SteensgaardAgnostic.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-steensgaard-agnostic && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-steensgaard-region-aware
llvm-build-steensgaard-region-aware:
	cmake $(CMAKE_CONFIG) \
		-B $(LLVM_TEST_BUILD)-steensgaard-region-aware \
		-C $(LLVM_TEST_ROOT)/cmake/SteensgaardRegionAware.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-steensgaard-region-aware && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-cne
llvm-build-cne:
	mkdir -p $(LLVM_TEST_BUILD)-cne
	cd $(LLVM_TEST_BUILD)-cne && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/cne.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-cne && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-dne
llvm-build-dne:
	mkdir -p $(LLVM_TEST_BUILD)-dne
	cd $(LLVM_TEST_BUILD)-dne && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/dne.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-dne && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-iln
llvm-build-iln:
	mkdir -p $(LLVM_TEST_BUILD)-iln
	cd $(LLVM_TEST_BUILD)-iln && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/iln.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-iln && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-inv
llvm-build-inv:
	mkdir -p $(LLVM_TEST_BUILD)-inv
	cd $(LLVM_TEST_BUILD)-inv && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/inv.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-inv && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-psh
llvm-build-psh:
	mkdir -p $(LLVM_TEST_BUILD)-psh
	cd $(LLVM_TEST_BUILD)-psh && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/psh.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-psh && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-pll
llvm-build-pll:
	mkdir -p $(LLVM_TEST_BUILD)-pll
	cd $(LLVM_TEST_BUILD)-pll && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/pll.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-pll && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-red
llvm-build-red:
	mkdir -p $(LLVM_TEST_BUILD)-red
	cd $(LLVM_TEST_BUILD)-red && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/red.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-red && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-ivt
llvm-build-ivt:
	mkdir -p $(LLVM_TEST_BUILD)-ivt
	cd $(LLVM_TEST_BUILD)-ivt && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/ivt.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-ivt && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-url
llvm-build-url:
	mkdir -p $(LLVM_TEST_BUILD)-url
	cd $(LLVM_TEST_BUILD)-url && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/url.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-url && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-build-opt
llvm-build-opt:
	mkdir -p $(LLVM_TEST_BUILD)-opt
	cd $(LLVM_TEST_BUILD)-opt && cmake \
		$(CMAKE_CONFIG) \
		-C$(LLVM_TEST_ROOT)/cmake/opt.cmake $(LLVM_TEST_GIT)
	cd $(LLVM_TEST_BUILD)-opt && make -j `nproc` VERBOSE=1 SHELL="/bin/bash -x"

.PHONY: llvm-run
llvm-run: llvm-build
	cd $(LLVM_TEST_BUILD) && lit -v -j `nproc` -o results.json .

.PHONY: llvm-run-aa
llvm-run-aa: llvm-build-aa
	cd $(LLVM_TEST_BUILD)-aa && lit -v -j `nproc` -o results.json .

# No failed tests

# Make sure you apply the andersen
.PHONY: llvm-run-andersen-agnostic
llvm-run-andersen-agnostic: llvm-build-andersen-agnostic
	cd $(LLVM_TEST_BUILD)-andersen-agnostic && lit -v -j `nproc` -o results.json .

.PHONY: llvm-run-steensgaard-agnostic
llvm-run-steensgaard-agnostic: llvm-build-steensgaard-agnostic
	cd $(LLVM_TEST_BUILD)-steensgaard-agnostic && lit -v -j `nproc` -o results.json .

.PHONY: llvm-run-steensgaard-region-aware
llvm-run-steensgaard-region-aware: llvm-build-steensgaard-region-aware
	cd $(LLVM_TEST_BUILD)-steensgaard-region-aware && lit -v -j `nproc` -o results.json .

.PHONY: llvm-run-cne
llvm-run-cne: llvm-build-cne
	cd $(LLVM_TEST_BUILD)-cne && lit -v -j `nproc` -o results.json .

# Failing Tests (1):
#    test-suite :: SingleSource/UnitTests/2004-02-02-NegativeZero.test

.PHONY: llvm-run-dne
llvm-run-dne: llvm-build-dne
	cd $(LLVM_TEST_BUILD)-dne && lit -v -j `nproc` -o results.json .

# No failed tests

.PHONY: llvm-run-iln
llvm-run-iln: llvm-build-iln
	cd $(LLVM_TEST_BUILD)-iln && lit -v -j `nproc` -o results.json .

#Failing Tests (30):
#    test-suite :: MultiSource/Applications/SIBsim4/SIBsim4.test
#    test-suite :: MultiSource/Applications/aha/aha.test
#    test-suite :: MultiSource/Applications/d/make_dparser.test
#    test-suite :: MultiSource/Applications/lua/lua.test
#    test-suite :: MultiSource/Benchmarks/FreeBench/pcompress2/pcompress2.test
#    test-suite :: MultiSource/Benchmarks/TSVC/GlobalDataFlow-dbl/GlobalDataFlow-dbl.test
#    test-suite :: MultiSource/Benchmarks/TSVC/GlobalDataFlow-flt/GlobalDataFlow-flt.test
#    test-suite :: MultiSource/Benchmarks/nbench/nbench.test
#    test-suite :: SingleSource/Benchmarks/BenchmarkGame/Large/fasta.test
#    test-suite :: SingleSource/Benchmarks/Polybench/datamining/correlation/correlation.test
#    test-suite :: SingleSource/Benchmarks/Polybench/datamining/covariance/covariance.test
#    test-suite :: SingleSource/Benchmarks/Polybench/linear-algebra/kernels/2mm/2mm.test
#    test-suite :: SingleSource/Benchmarks/Polybench/linear-algebra/kernels/3mm/3mm.test
#    test-suite :: SingleSource/Benchmarks/Polybench/linear-algebra/kernels/cholesky/cholesky.test
#    test-suite :: SingleSource/Benchmarks/Polybench/linear-algebra/kernels/doitgen/doitgen.test
#    test-suite :: SingleSource/Benchmarks/Polybench/linear-algebra/kernels/gemm/gemm.test
#    test-suite :: SingleSource/Benchmarks/Polybench/linear-algebra/kernels/symm/symm.test
#    test-suite :: SingleSource/Benchmarks/Polybench/linear-algebra/kernels/syr2k/syr2k.test
#    test-suite :: SingleSource/Benchmarks/Polybench/linear-algebra/kernels/syrk/syrk.test
#    test-suite :: SingleSource/Benchmarks/Polybench/linear-algebra/kernels/trmm/trmm.test
#    test-suite :: SingleSource/Benchmarks/Polybench/medley/floyd-warshall/floyd-warshall.test
#    test-suite :: SingleSource/Benchmarks/Polybench/stencils/adi/adi.test
#    test-suite :: SingleSource/Benchmarks/Polybench/stencils/jacobi-2d-imper/jacobi-2d-imper.test
#    test-suite :: SingleSource/Benchmarks/Polybench/stencils/seidel-2d/seidel-2d.test
#    test-suite :: SingleSource/Benchmarks/Shootout/Shootout-hash.test
#    test-suite :: SingleSource/Regression/C/Regression-C-2004-08-12-InlinerAndAllocas.test
#    test-suite :: SingleSource/Regression/C/Regression-C-PR640.test
#    test-suite :: SingleSource/Regression/C/gcc-c-torture/execute/GCC-C-execute-920625-1.test
#    test-suite :: SingleSource/Regression/C/gcc-c-torture/execute/GCC-C-execute-pr28289.test
#    test-suite :: SingleSource/Regression/C/gcc-c-torture/execute/GCC-C-execute-va-arg-24.test

.PHONY: llvm-run-inv
llvm-run-inv: llvm-build-inv
	cd $(LLVM_TEST_BUILD)-inv && lit -v -j `nproc` -o results.json .

# No failed tests

.PHONY: llvm-run-psh
llvm-run-psh: llvm-build-psh
	cd $(LLVM_TEST_BUILD)-psh && lit -v -j `nproc` -o results.json .

# Failing Tests (72):

.PHONY: llvm-run-pll
llvm-run-pll: llvm-build-pll
	cd $(LLVM_TEST_BUILD)-pll && lit -v -j `nproc` -o results.json .

# No failed tests

.PHONY: llvm-run-red
llvm-run-red: llvm-build-red
	cd $(LLVM_TEST_BUILD)-red && lit -v -j `nproc` -o results.json .

# Aborts during compilation

.PHONY: llvm-run-ivt
llvm-run-ivt: llvm-build-ivt
	cd $(LLVM_TEST_BUILD)-ivt && lit -v -j `nproc` -o results.json .

# No failed tests

.PHONY: llvm-run-url
llvm-run-url: llvm-build-url
	cd $(LLVM_TEST_BUILD)-url && lit -v -j `nproc` -o results.json .

# No failed tests

.PHONY: llvm-run-opt
llvm-run-opt: llvm-build-opt
	cd $(LLVM_TEST_BUILD)-opt && lit -v -j `nproc` -o results.json .

# No failed tests

.PHONY: llvm-clean
llvm-clean:
	rm -rf $(LLVM_TEST_BUILD) $(LLVM_TEST_BUILD)-opt
